name: Linting and Docker Deployment
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/app

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install pylint
          pip install pytest
          pip install pandas
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 project/app.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 project/preprocessing/preprocessing.py --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Test with pytest
        run: |
          python -m pytest
          
      - name: Log in to Github Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build Image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest
  deploy:
      name: Deploy to Heroku
      runs-on: ubuntu-latest
      needs: [build]
      env:
        HEROKU_APP_NAME: gcash-assessment
        HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/app
      steps:
        - name: Checkout master
          uses: actions/checkout@v2.3.4
        - name: Log in to Github Packages
          run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
          env: 
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: Pull image
          run: |
            docker pull ${{ env.IMAGE }}:latest || true
        - name: Build image
          run: |
            docker build \
              --cache-from ${{ env.IMAGE }}:latest \
              --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
              --file ./project/Dockerfile.prod \
              "./project"
        - name: Log in to the Heroku Container Registry
          run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
          env:
            HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
        - name: Push to the registry
          run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
        - name: Set environment variables
          run: |
            echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
            echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
        - name: Release
          run: |
            chmod +x ./release.sh
            ./release.sh
